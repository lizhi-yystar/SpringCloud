class StaticClass{


    static {
        System.out.println("here is static block");
    }

    {
        System.out.println("here is block");
    }

    static int a = 1;

    public static void test1(){
        System.out.println("here is static method");
    }

    public StaticClass(){
        System.out.println("here is construct method");
    }
}

public class StaticDemo {

    public static  void main(String[] args) throws IllegalAccessException, InstantiationException {
        System.out.println("start ,hello world");
        StaticClass.test1();
        System.out.println(StaticClass.class.newInstance());
    }

}


执行顺序:
  start ,hello world
  here is static block
  here is static method
  here is block
  here is construct method
  BasicDemos.study.in.com.zuzuche.design.patter.singleton.statiKnowleage.StaticClass@677327b6
  
  为什么是这样的一个执行结果 引申出：对象内存模型
      堆（Heap）：线程共享。所有的对象实例以及数组都要在堆上分配。回收器主要管理的对象。
      方法区（Method Area）：线程共享。存储类信息、常量、静态变量、即时编译器编译后的代码。
      方法栈（JVM Stack）：线程私有。存储局部变量表、操作栈、动态链接、方法出口，对象指针。
      本地方法栈（Native Method Stack）：线程私有。为虚拟机使用到的Native 方法服务。如Java使用c或者c++编写的接口服务时，代码在此区运行。
      程序计数器（Program Counter Register）：线程私有。有些文章也翻译成PC寄存器（PC Register），同一个东西。它可以看作是当前线程所执行的字节码的行号指示器。指向下一条要执行的指令
